{"version":3,"sources":["../../src/api/digitalAsset.ts"],"sourcesContent":["// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AnyNumber,\n  GetCollectionDataResponse,\n  GetCurrentTokenOwnershipResponse,\n  GetOwnedTokensResponse,\n  GetTokenActivityResponse,\n  GetTokenDataResponse,\n  OrderBy,\n  PaginationArgs,\n  TokenStandard,\n} from \"../types\";\nimport { Account, AccountAddressInput } from \"../core\";\nimport { InputGenerateTransactionOptions, SingleSignerTransaction } from \"../transactions/types\";\nimport {\n  CreateCollectionOptions,\n  createCollectionTransaction,\n  getCollectionData,\n  getCollectionId,\n  getCurrentTokenOwnership,\n  getOwnedTokens,\n  getTokenActivity,\n  getTokenData,\n  mintTokenTransaction,\n} from \"../internal/digitalAsset\";\nimport { ProcessorType } from \"../utils/const\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { waitForIndexerOnVersion } from \"./utils\";\n\n/**\n * A class to query all `DigitalAsset` related queries on Aptos.\n */\nexport class DigitalAsset {\n  constructor(readonly config: AptosConfig) {}\n\n  /**\n   * Creates a new collection within the specified account\n   *\n   * @param args.creator the account of the collection's creator\n   * @param args.description the description of the collection\n   * @param args.name the name of the collection\n   * @param args.uri the URI to additional info about the collection\n   *\n   * The parameters below are optional.\n   * @param args.maxSupply controls the max supply of the tokens - defaults MAX_U64_BIG_INT\n   * @param args.mutableDescription controls mutability of the collection's description - defaults true\n   * @param args.mutableRoyalty controls mutability of the collection's description - defaults true\n   * @param args.mutableUri controls mutability of the collection's URI - defaults true\n   * @param args.mutableTokenDescription controls mutability of the token's description - defaults true\n   * @param args.mutableTokenName controls mutability of the token's name - defaults true\n   * @param args.mutableTokenProperties controls mutability of token's properties - defaults true\n   * @param args.mutableTokenUri controls mutability of the token's URI - defaults true\n   * @param args.tokensBurnableByCreator controls whether tokens can be burnable by the creator - defaults true\n   * @param args.tokensFreezableByCreator controls whether tokens can be frozen by the creator - defaults true\n   * @param args.royaltyNumerator the numerator of the royalty to be paid to the creator when a token is transferred - defaults 0\n   * @param args.royaltyDenominator the denominator of the royalty to be paid to the creator when a token is transferred -\n   *    defaults 1\n   *\n   * @returns A SingleSignerTransaction that when submitted will create the collection.\n   */\n  async createCollectionTransaction(\n    args: {\n      creator: Account;\n      description: string;\n      name: string;\n      uri: string;\n      options?: InputGenerateTransactionOptions;\n    } & CreateCollectionOptions,\n  ): Promise<SingleSignerTransaction> {\n    return createCollectionTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries data of a specific collection by the collection creator address and the collection name.\n   *\n   * If, for some reason, a creator account has 2 collections with the same name in v1 and v2,\n   * can pass an optional `tokenStandard` parameter to query a specific standard\n   *\n   * @param args.creatorAddress the address of the collection's creator\n   * @param args.collectionName the name of the collection\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @param args.options.tokenStandard the token standard to query\n   * @returns GetCollectionDataResponse response type\n   */\n  async getCollectionData(args: {\n    creatorAddress: AccountAddressInput;\n    collectionName: string;\n    minimumLedgerVersion?: AnyNumber;\n    options?: {\n      tokenStandard?: TokenStandard;\n    };\n  }): Promise<GetCollectionDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorTypes: getTokenProcessorTypes(args.options?.tokenStandard),\n    });\n    return getCollectionData({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Queries a collection's ID.\n   *\n   * This is the same as the collection's object address in V2, but V1 does\n   * not use objects, and does not have an address\n   *\n   * @param args.creatorAddress the address of the collection's creator\n   * @param args.collectionName the name of the collection\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @param args.options.tokenStandard the token standard to query\n   * @returns the collection id\n   */\n  async getCollectionId(args: {\n    creatorAddress: AccountAddressInput;\n    collectionName: string;\n    minimumLedgerVersion?: AnyNumber;\n    options?: {\n      tokenStandard?: TokenStandard;\n    };\n  }): Promise<string> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      processorTypes: getTokenProcessorTypes(args.options?.tokenStandard),\n    });\n    return getCollectionId({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Create a transaction to mint a token into the creators account within an existing collection.\n   *\n   * @param args.creator the creator of the collection\n   * @param args.collection the name of the collection the token belongs to\n   * @param args.description the description of the token\n   * @param args.name the name of the token\n   * @param args.uri the URI to additional info about the token\n   *\n   * @returns A SingleSignerTransaction that can be simulated or submitted to chain\n   */\n  async mintTokenTransaction(args: {\n    creator: Account;\n    collection: string;\n    description: string;\n    name: string;\n    uri: string;\n    options?: InputGenerateTransactionOptions;\n  }): Promise<SingleSignerTransaction> {\n    return mintTokenTransaction({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Gets token data given the address of a token.\n   *\n   * @param args.tokenAddress The address of the token\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns GetTokenDataResponse containing relevant data to the token.\n   */\n  async getTokenData(args: {\n    tokenAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetTokenDataResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      // TODO(greg): Should take in a consistent input for token queries\n      processorTypes: getTokenProcessorTypes(undefined),\n    });\n    return getTokenData({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Gets token ownership data given the address of a token.\n   *\n   * @param args.tokenAddress The address of the token\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns GetCurrentTokenOwnershipResponse containing relevant ownership data of the token.\n   */\n  async getCurrentTokenOwnership(args: {\n    tokenAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n  }): Promise<GetCurrentTokenOwnershipResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      // TODO(greg): Should take in a consistent input for token queries\n      processorTypes: getTokenProcessorTypes(undefined),\n    });\n    return getCurrentTokenOwnership({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Gets the tokens that the given address owns.\n   *\n   * @param args.ownerAddress The address of the owner\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns GetOwnedTokensResponse containing ownership data of the tokens belonging to the ownerAddresss.\n   */\n  async getOwnedTokens(args: {\n    ownerAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: {\n      pagination?: PaginationArgs;\n      orderBy?: OrderBy<GetOwnedTokensResponse[0]>;\n    };\n  }): Promise<GetOwnedTokensResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      // TODO(greg): Should take in a consistent input for token queries\n      processorTypes: getTokenProcessorTypes(undefined),\n    });\n    return getOwnedTokens({ aptosConfig: this.config, ...args });\n  }\n\n  /**\n   * Gets the activity data given the address of a token.\n   *\n   * @param args.tokenAddress The address of the token\n   * @param args.minimumLedgerVersion Optional ledger version to sync up to, before querying\n   * @returns GetTokenActivityResponse containing relevant activity data to the token.\n   */\n  async getTokenActivity(args: {\n    tokenAddress: AccountAddressInput;\n    minimumLedgerVersion?: AnyNumber;\n    options?: {\n      pagination?: PaginationArgs;\n      orderBy?: OrderBy<GetTokenActivityResponse[0]>;\n    };\n  }): Promise<GetTokenActivityResponse> {\n    await waitForIndexerOnVersion({\n      config: this.config,\n      minimumLedgerVersion: args.minimumLedgerVersion,\n      // TODO(greg): Should take in a consistent input for token queries\n      processorTypes: getTokenProcessorTypes(undefined),\n    });\n    return getTokenActivity({ aptosConfig: this.config, ...args });\n  }\n}\n\nfunction getTokenProcessorTypes(tokenStandard?: TokenStandard) {\n  switch (tokenStandard) {\n    case \"v1\":\n      return [ProcessorType.TOKEN_PROCESSOR];\n    case \"v2\":\n      return [ProcessorType.TOKEN_V2_PROCESSOR];\n    default:\n      // If it's something we don't recognize, or undefined, just do both\n      return [ProcessorType.TOKEN_PROCESSOR, ProcessorType.TOKEN_V2_PROCESSOR];\n  }\n}\n"],"mappings":"mIAkCO,IAAMA,EAAN,KAAmB,CACxB,YAAqBC,EAAqB,CAArB,YAAAA,CAAsB,CA2B3C,MAAM,4BACJC,EAOkC,CAClC,OAAOC,EAA4B,CAAE,YAAa,KAAK,OAAQ,GAAGD,CAAK,CAAC,CAC1E,CAcA,MAAM,kBAAkBA,EAOe,CACrC,aAAME,EAAwB,CAC5B,OAAQ,KAAK,OACb,qBAAsBF,EAAK,qBAC3B,eAAgBG,EAAuBH,EAAK,SAAS,aAAa,CACpE,CAAC,EACMI,EAAkB,CAAE,YAAa,KAAK,OAAQ,GAAGJ,CAAK,CAAC,CAChE,CAcA,MAAM,gBAAgBA,EAOF,CAClB,aAAME,EAAwB,CAC5B,OAAQ,KAAK,OACb,qBAAsBF,EAAK,qBAC3B,eAAgBG,EAAuBH,EAAK,SAAS,aAAa,CACpE,CAAC,EACMK,EAAgB,CAAE,YAAa,KAAK,OAAQ,GAAGL,CAAK,CAAC,CAC9D,CAaA,MAAM,qBAAqBA,EAOU,CACnC,OAAOM,EAAqB,CAAE,YAAa,KAAK,OAAQ,GAAGN,CAAK,CAAC,CACnE,CASA,MAAM,aAAaA,EAGe,CAChC,aAAME,EAAwB,CAC5B,OAAQ,KAAK,OACb,qBAAsBF,EAAK,qBAE3B,eAAgBG,EAAuB,MAAS,CAClD,CAAC,EACMI,EAAa,CAAE,YAAa,KAAK,OAAQ,GAAGP,CAAK,CAAC,CAC3D,CASA,MAAM,yBAAyBA,EAGe,CAC5C,aAAME,EAAwB,CAC5B,OAAQ,KAAK,OACb,qBAAsBF,EAAK,qBAE3B,eAAgBG,EAAuB,MAAS,CAClD,CAAC,EACMK,EAAyB,CAAE,YAAa,KAAK,OAAQ,GAAGR,CAAK,CAAC,CACvE,CASA,MAAM,eAAeA,EAOe,CAClC,aAAME,EAAwB,CAC5B,OAAQ,KAAK,OACb,qBAAsBF,EAAK,qBAE3B,eAAgBG,EAAuB,MAAS,CAClD,CAAC,EACMM,EAAe,CAAE,YAAa,KAAK,OAAQ,GAAGT,CAAK,CAAC,CAC7D,CASA,MAAM,iBAAiBA,EAOe,CACpC,aAAME,EAAwB,CAC5B,OAAQ,KAAK,OACb,qBAAsBF,EAAK,qBAE3B,eAAgBG,EAAuB,MAAS,CAClD,CAAC,EACMO,EAAiB,CAAE,YAAa,KAAK,OAAQ,GAAGV,CAAK,CAAC,CAC/D,CACF,EAEA,SAASG,EAAuBQ,EAA+B,CAC7D,OAAQA,EAAe,CACrB,IAAK,KACH,MAAO,kBAA8B,EACvC,IAAK,KACH,MAAO,qBAAiC,EAC1C,QAEE,MAAO,uCAAgE,CAC3E,CACF","names":["DigitalAsset","config","args","createCollectionTransaction","waitForIndexerOnVersion","getTokenProcessorTypes","getCollectionData","getCollectionId","mintTokenTransaction","getTokenData","getCurrentTokenOwnership","getOwnedTokens","getTokenActivity","tokenStandard"]}