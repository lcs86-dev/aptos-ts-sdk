{"version":3,"sources":["../../src/core/crypto/multiKey.ts"],"sourcesContent":["import { Hex } from \"../hex\";\nimport { HexInput } from \"../../types\";\nimport { Deserializer } from \"../../bcs/deserializer\";\nimport { Serializer } from \"../../bcs/serializer\";\nimport { AnyPublicKey } from \"./anyPublicKey\";\nimport { AnySignature } from \"./anySignature\";\nimport { PublicKey } from \"./asymmetricCrypto\";\n\nexport class MultiKey extends PublicKey {\n  /**\n   * List of any public keys\n   */\n  public readonly publicKeys: AnyPublicKey[];\n\n  /**\n   * The minimum number of valid signatures required, for the number of public keys specified\n   */\n  public readonly signaturesRequired: number;\n\n  constructor(args: { publicKeys: PublicKey[]; signaturesRequired: number }) {\n    super();\n    const { publicKeys, signaturesRequired } = args;\n\n    // Validate number of public keys is greater than signature required\n    if (signaturesRequired < 1) {\n      throw new Error(\"The number of required signatures needs to be greater then 0\");\n    }\n\n    // Validate number of public keys is greater than signature required\n    if (publicKeys.length < signaturesRequired) {\n      throw new Error(\n        `Provided ${publicKeys.length} public keys is smaller than the ${signaturesRequired} required signatures`,\n      );\n    }\n\n    const keys: AnyPublicKey[] = [];\n    publicKeys.forEach((publicKey) => {\n      if (publicKey instanceof AnyPublicKey) {\n        keys.push(publicKey);\n      } else {\n        // if public key is instance of a legacy authentication key, i.e\n        // Legacy Ed25519, convert it into AnyPublicKey\n        keys.push(new AnyPublicKey(publicKey));\n      }\n    });\n\n    this.publicKeys = keys;\n    this.signaturesRequired = signaturesRequired;\n  }\n\n  toUint8Array(): Uint8Array {\n    return this.bcsToBytes();\n  }\n\n  /**\n   * Create a bitmap that holds the mapping from the original public keys\n   * to the signatures passed in\n   *\n   * @param args.bits array of the index mapping to the matching public keys\n   * @returns Uint8array bit map\n   */\n  createBitmap(args: { bits: number[] }): Uint8Array {\n    const { bits } = args;\n    // Bits are read from left to right. e.g. 0b10000000 represents the first bit is set in one byte.\n    // The decimal value of 0b10000000 is 128.\n    const firstBitInByte = 128;\n    const bitmap = new Uint8Array([0, 0, 0, 0]);\n\n    // Check if duplicates exist in bits\n    const dupCheckSet = new Set();\n\n    bits.forEach((bit: number, idx: number) => {\n      if (idx + 1 > this.publicKeys.length) {\n        throw new Error(`Signature index ${idx + 1} is out of public keys range, ${this.publicKeys.length}.`);\n      }\n\n      if (dupCheckSet.has(bit)) {\n        throw new Error(`Duplicate bit ${bit} detected.`);\n      }\n\n      dupCheckSet.add(bit);\n\n      const byteOffset = Math.floor(bit / 8);\n\n      let byte = bitmap[byteOffset];\n\n      // eslint-disable-next-line no-bitwise\n      byte |= firstBitInByte >> bit % 8;\n\n      bitmap[byteOffset] = byte;\n    });\n\n    return bitmap;\n  }\n\n  /**\n   * Hex string representation the multi key bytes\n   *\n   * @returns string\n   */\n  toString(): string {\n    return Hex.fromHexInput(this.toUint8Array()).toString();\n  }\n\n  // TODO\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  verifySignature(args: { message: HexInput; signature: AnySignature }): boolean {\n    throw new Error(\"not implemented\");\n  }\n\n  serialize(serializer: Serializer): void {\n    serializer.serializeVector(this.publicKeys);\n    serializer.serializeU8(this.signaturesRequired);\n  }\n\n  static deserialize(deserializer: Deserializer): MultiKey {\n    const keys = deserializer.deserializeVector(AnyPublicKey);\n    const signaturesRequired = deserializer.deserializeU8();\n\n    return new MultiKey({ publicKeys: keys, signaturesRequired });\n  }\n}\n"],"mappings":"2HAQO,IAAMA,EAAN,MAAMC,UAAiBC,CAAU,CAWtC,YAAYC,EAA+D,CACzE,MAAM,EACN,GAAM,CAAE,WAAAC,EAAY,mBAAAC,CAAmB,EAAIF,EAG3C,GAAIE,EAAqB,EACvB,MAAM,IAAI,MAAM,8DAA8D,EAIhF,GAAID,EAAW,OAASC,EACtB,MAAM,IAAI,MACR,YAAYD,EAAW,MAAM,oCAAoCC,CAAkB,sBACrF,EAGF,IAAMC,EAAuB,CAAC,EAC9BF,EAAW,QAASG,GAAc,CAC5BA,aAAqBC,EACvBF,EAAK,KAAKC,CAAS,EAInBD,EAAK,KAAK,IAAIE,EAAaD,CAAS,CAAC,CAEzC,CAAC,EAED,KAAK,WAAaD,EAClB,KAAK,mBAAqBD,CAC5B,CAEA,cAA2B,CACzB,OAAO,KAAK,WAAW,CACzB,CASA,aAAaF,EAAsC,CACjD,GAAM,CAAE,KAAAM,CAAK,EAAIN,EAGXO,EAAiB,IACjBC,EAAS,IAAI,WAAW,CAAC,EAAG,EAAG,EAAG,CAAC,CAAC,EAGpCC,EAAc,IAAI,IAExB,OAAAH,EAAK,QAAQ,CAACI,EAAaC,IAAgB,CACzC,GAAIA,EAAM,EAAI,KAAK,WAAW,OAC5B,MAAM,IAAI,MAAM,mBAAmBA,EAAM,CAAC,iCAAiC,KAAK,WAAW,MAAM,GAAG,EAGtG,GAAIF,EAAY,IAAIC,CAAG,EACrB,MAAM,IAAI,MAAM,iBAAiBA,CAAG,YAAY,EAGlDD,EAAY,IAAIC,CAAG,EAEnB,IAAME,EAAa,KAAK,MAAMF,EAAM,CAAC,EAEjCG,EAAOL,EAAOI,CAAU,EAG5BC,GAAQN,GAAkBG,EAAM,EAEhCF,EAAOI,CAAU,EAAIC,CACvB,CAAC,EAEML,CACT,CAOA,UAAmB,CACjB,OAAOM,EAAI,aAAa,KAAK,aAAa,CAAC,EAAE,SAAS,CACxD,CAIA,gBAAgBd,EAA+D,CAC7E,MAAM,IAAI,MAAM,iBAAiB,CACnC,CAEA,UAAUe,EAA8B,CACtCA,EAAW,gBAAgB,KAAK,UAAU,EAC1CA,EAAW,YAAY,KAAK,kBAAkB,CAChD,CAEA,OAAO,YAAYC,EAAsC,CACvD,IAAMb,EAAOa,EAAa,kBAAkBX,CAAY,EAClDH,EAAqBc,EAAa,cAAc,EAEtD,OAAO,IAAIlB,EAAS,CAAE,WAAYK,EAAM,mBAAAD,CAAmB,CAAC,CAC9D,CACF","names":["MultiKey","_MultiKey","PublicKey","args","publicKeys","signaturesRequired","keys","publicKey","AnyPublicKey","bits","firstBitInByte","bitmap","dupCheckSet","bit","idx","byteOffset","byte","Hex","serializer","deserializer"]}