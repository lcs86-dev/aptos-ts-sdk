{"version":3,"sources":["../../src/internal/event.ts"],"sourcesContent":["// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/event}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * event namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddress, AccountAddressInput } from \"../core\";\nimport { AnyNumber, GetEventsResponse, PaginationArgs, MoveStructId, OrderBy } from \"../types\";\nimport { GetEventsQuery } from \"../types/generated/operations\";\nimport { GetEvents } from \"../types/generated/queries\";\nimport { EventsBoolExp } from \"../types/generated/types\";\nimport { queryIndexer } from \"./general\";\n\nexport async function getAccountEventsByCreationNumber(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  creationNumber: AnyNumber;\n}): Promise<GetEventsResponse> {\n  const { accountAddress, aptosConfig, creationNumber } = args;\n  const address = AccountAddress.from(accountAddress);\n\n  const whereCondition: EventsBoolExp = {\n    account_address: { _eq: address.toStringLong() },\n    creation_number: { _eq: creationNumber },\n  };\n\n  return getEvents({ aptosConfig, options: { where: whereCondition } });\n}\n\nexport async function getAccountEventsByEventType(args: {\n  aptosConfig: AptosConfig;\n  accountAddress: AccountAddressInput;\n  eventType: MoveStructId;\n  options?: {\n    pagination?: PaginationArgs;\n    orderBy?: OrderBy<GetEventsResponse[0]>;\n  };\n}): Promise<GetEventsResponse> {\n  const { accountAddress, aptosConfig, eventType, options } = args;\n  const address = AccountAddress.fromRelaxed(accountAddress).toStringLong();\n\n  const whereCondition: EventsBoolExp = {\n    account_address: { _eq: address },\n    indexed_type: { _eq: eventType },\n  };\n\n  const customOptions = {\n    where: whereCondition,\n    pagination: options?.pagination,\n    orderBy: options?.orderBy,\n  };\n\n  return getEvents({ aptosConfig, options: customOptions });\n}\n\nexport async function getEvents(args: {\n  aptosConfig: AptosConfig;\n  options?: {\n    where?: EventsBoolExp;\n    pagination?: PaginationArgs;\n    orderBy?: OrderBy<GetEventsResponse[0]>;\n  };\n}): Promise<GetEventsResponse> {\n  const { aptosConfig, options } = args;\n\n  const graphqlQuery = {\n    query: GetEvents,\n    variables: {\n      where_condition: options?.where,\n      offset: options?.pagination?.offset,\n      limit: options?.pagination?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetEventsQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getEvents\",\n  });\n\n  return data.events;\n}\n"],"mappings":"2HAkBA,eAAsBA,EAAiCC,EAIxB,CAC7B,GAAM,CAAE,eAAAC,EAAgB,YAAAC,EAAa,eAAAC,CAAe,EAAIH,EAGlDI,EAAgC,CACpC,gBAAiB,CAAE,IAHLC,EAAe,KAAKJ,CAAc,EAGhB,aAAa,CAAE,EAC/C,gBAAiB,CAAE,IAAKE,CAAe,CACzC,EAEA,OAAOG,EAAU,CAAE,YAAAJ,EAAa,QAAS,CAAE,MAAOE,CAAe,CAAE,CAAC,CACtE,CAEA,eAAsBG,EAA4BP,EAQnB,CAC7B,GAAM,CAAE,eAAAC,EAAgB,YAAAC,EAAa,UAAAM,EAAW,QAAAC,CAAQ,EAAIT,EAQtDU,EAAgB,CACpB,MANoC,CACpC,gBAAiB,CAAE,IAHLL,EAAe,YAAYJ,CAAc,EAAE,aAAa,CAGtC,EAChC,aAAc,CAAE,IAAKO,CAAU,CACjC,EAIE,WAAYC,GAAS,WACrB,QAASA,GAAS,OACpB,EAEA,OAAOH,EAAU,CAAE,YAAAJ,EAAa,QAASQ,CAAc,CAAC,CAC1D,CAEA,eAAsBJ,EAAUN,EAOD,CAC7B,GAAM,CAAE,YAAAE,EAAa,QAAAO,CAAQ,EAAIT,EAE3BW,EAAe,CACnB,MAAOC,EACP,UAAW,CACT,gBAAiBH,GAAS,MAC1B,OAAQA,GAAS,YAAY,OAC7B,MAAOA,GAAS,YAAY,MAC5B,SAAUA,GAAS,OACrB,CACF,EAQA,OANa,MAAMI,EAA6B,CAC9C,YAAAX,EACA,MAAOS,EACP,aAAc,WAChB,CAAC,GAEW,MACd","names":["getAccountEventsByCreationNumber","args","accountAddress","aptosConfig","creationNumber","whereCondition","AccountAddress","getEvents","getAccountEventsByEventType","eventType","options","customOptions","graphqlQuery","GetEvents","queryIndexer"]}