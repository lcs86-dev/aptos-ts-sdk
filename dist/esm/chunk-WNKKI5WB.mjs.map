{"version":3,"sources":["../../src/api/utils.ts"],"sourcesContent":["import { waitForIndexer } from \"../internal/transaction\";\nimport { ProcessorType } from \"../utils\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { AnyNumber } from \"../types\";\n\n/**\n * Utility function to handle optional waiting on indexer for APIs\n *\n * This is purposely placed here to not expose this internal function.\n * @param args\n */\nexport async function waitForIndexerOnVersion(args: {\n  config: AptosConfig;\n  minimumLedgerVersion?: AnyNumber;\n  processorTypes: Array<ProcessorType>;\n}) {\n  if (args.minimumLedgerVersion !== undefined) {\n    // eslint-disable-next-line no-restricted-syntax\n\n    // Collect all of the promises to wait at the same time\n    // TODO(greg): This needs to be refactored to be handled at the query time.  It involves rewriting\n    // a bunch of the logic for wait for indexer\n    const promises: Array<Promise<void>> = [];\n    // eslint-disable-next-line no-restricted-syntax\n    for (const processorType of args.processorTypes) {\n      promises.push(\n        waitForIndexer({\n          aptosConfig: args.config,\n          minimumLedgerVersion: args.minimumLedgerVersion,\n          processorType,\n        }),\n      );\n    }\n\n    await Promise.all(promises);\n  }\n}\n"],"mappings":"yCAWA,eAAsBA,EAAwBC,EAI3C,CACD,GAAIA,EAAK,uBAAyB,OAAW,CAM3C,IAAMC,EAAiC,CAAC,EAExC,QAAWC,KAAiBF,EAAK,eAC/BC,EAAS,KACPE,EAAe,CACb,YAAaH,EAAK,OAClB,qBAAsBA,EAAK,qBAC3B,cAAAE,CACF,CAAC,CACH,EAGF,MAAM,QAAQ,IAAID,CAAQ,CAC5B,CACF","names":["waitForIndexerOnVersion","args","promises","processorType","waitForIndexer"]}